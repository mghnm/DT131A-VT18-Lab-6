
Lab6DT131A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000771  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c8  00000000  00000000  000009f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000352  00000000  00000000  000010b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  0000140c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d2  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a6  00000000  00000000  0000184a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 67 00 	call	0xce	; 0xce <main>
  88:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:
volatile uint8_t resultDigital;

void initializeADC();
uint8_t convertToDigital();

ISR(ADC_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	resultDigital = ADCH;
  9c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  a4:	8f 91       	pop	r24
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <initializeADC>:
}


void initializeADC(){
	//Configure the ADMUX for AVCC as input (internal 5v reference) / left adjusted results (8-bit resolution) / ADC0 as input
	ADMUX = 0x60;
  b0:	80 e6       	ldi	r24, 0x60	; 96
  b2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	//Configure ADCSRA for enable ADC / don't start conversion / prescaler 2 / disable auto-trigger / enable ADC interrupt 0b10001001
	ADCSRA = 0x89;
  b6:	89 e8       	ldi	r24, 0x89	; 137
  b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  bc:	08 95       	ret

000000be <convertToDigital>:
}

uint8_t convertToDigital(){
	//Set the Start bit to 1 in ADCSRA
	ADCSRA |= (1 << ADSC);
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
	
	return resultDigital;
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
	
  cc:	08 95       	ret

000000ce <main>:
ISR(ADC_vect){
	resultDigital = ADCH;
}

int main(void)
{
  ce:	cf 93       	push	r28
    /* Replace with your application code */
	//Set port D as output for LED
	DDRB = 0xFF;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	84 b9       	out	0x04, r24	; 4
	initializeADC();
  d4:	0e 94 58 00 	call	0xb0	; 0xb0 <initializeADC>
		} else if((resultDigital > 205) && (resultDigital < 256)){
			PORTB = 0X80;
			break;
		} else {
			//Light up all led for debugging purposes
			PORTB = 0xFF;
  d8:	cf ef       	ldi	r28, 0xFF	; 255
	//Set port D as output for LED
	DDRB = 0xFF;
	initializeADC();
    while (1) 
    {
		convertToDigital();
  da:	0e 94 5f 00 	call	0xbe	; 0xbe <convertToDigital>
		* 2 -> 3 volts : 104 - 154		PortB = 0b00010000
		* 3 -> 4 volts : 155 - 205		PortB = 0b00100000
		* 4 -> 5 volts : 206 - 255		PortB = 0b10000000
		*/
		
		if(resultDigital < 53){
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e2:	85 33       	cpi	r24, 0x35	; 53
  e4:	18 f4       	brcc	.+6      	; 0xec <main+0x1e>
			PORTB = 0X01;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	85 b9       	out	0x05, r24	; 5
			break;
  ea:	35 c0       	rjmp	.+106    	; 0x156 <main+0x88>
		} else if((resultDigital > 52) && (resultDigital < 104)){
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f0:	85 33       	cpi	r24, 0x35	; 53
  f2:	38 f0       	brcs	.+14     	; 0x102 <main+0x34>
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f8:	88 36       	cpi	r24, 0x68	; 104
  fa:	18 f4       	brcc	.+6      	; 0x102 <main+0x34>
			PORTB = 0X04;
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	85 b9       	out	0x05, r24	; 5
			break;
 100:	2a c0       	rjmp	.+84     	; 0x156 <main+0x88>
		} else if((resultDigital > 103) && (resultDigital < 155)){
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 106:	88 36       	cpi	r24, 0x68	; 104
 108:	38 f0       	brcs	.+14     	; 0x118 <main+0x4a>
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10e:	8b 39       	cpi	r24, 0x9B	; 155
 110:	18 f4       	brcc	.+6      	; 0x118 <main+0x4a>
			PORTB = 0X10;
 112:	80 e1       	ldi	r24, 0x10	; 16
 114:	85 b9       	out	0x05, r24	; 5
			break;
 116:	1f c0       	rjmp	.+62     	; 0x156 <main+0x88>
		} else if((resultDigital > 154) && (resultDigital < 206)){
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11c:	8b 39       	cpi	r24, 0x9B	; 155
 11e:	38 f0       	brcs	.+14     	; 0x12e <main+0x60>
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 124:	8e 3c       	cpi	r24, 0xCE	; 206
 126:	18 f4       	brcc	.+6      	; 0x12e <main+0x60>
			PORTB = 0X20;
 128:	80 e2       	ldi	r24, 0x20	; 32
 12a:	85 b9       	out	0x05, r24	; 5
			break;
 12c:	14 c0       	rjmp	.+40     	; 0x156 <main+0x88>
		} else if((resultDigital > 205) && (resultDigital < 256)){
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 132:	8e 3c       	cpi	r24, 0xCE	; 206
 134:	28 f0       	brcs	.+10     	; 0x140 <main+0x72>
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
			PORTB = 0X80;
 13a:	80 e8       	ldi	r24, 0x80	; 128
 13c:	85 b9       	out	0x05, r24	; 5
			break;
 13e:	0b c0       	rjmp	.+22     	; 0x156 <main+0x88>
		} else {
			//Light up all led for debugging purposes
			PORTB = 0xFF;
 140:	c5 b9       	out	0x05, r28	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	2f e3       	ldi	r18, 0x3F	; 63
 144:	82 e4       	ldi	r24, 0x42	; 66
 146:	9f e0       	ldi	r25, 0x0F	; 15
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x7a>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x84>
 152:	00 00       	nop
 154:	c2 cf       	rjmp	.-124    	; 0xda <main+0xc>
		//Delay for 5 second interval execution
		_delay_ms(5000);
		
		
    }
}
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
